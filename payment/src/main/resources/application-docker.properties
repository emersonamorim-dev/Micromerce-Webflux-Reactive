# Application
spring.application.name=payment-service
server.port=8083

# MySQL R2DBC Docker Configuration
spring.r2dbc.url=r2dbc:mysql://${DB_HOST:mysql}:${DB_PORT:3306}/${DB_NAME:payment_db}?useSSL=false&serverTimezone=UTC
spring.r2dbc.username=${DB_USERNAME:root}
spring.r2dbc.password=${DB_PASSWORD:root}
spring.r2dbc.pool.initial-size=10
spring.r2dbc.pool.max-size=30
spring.r2dbc.pool.max-idle-time=30m
spring.r2dbc.properties.connect-timeout=10000
spring.r2dbc.properties.ssl=false

# Database Initialization
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.platform=mysql
spring.sql.init.continue-on-error=true

# Kafka Docker Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.request.timeout.ms=20000
spring.kafka.producer.properties.retry.backoff.ms=1000
spring.kafka.producer.properties.linger.ms=100
spring.kafka.producer.properties.compression.type=snappy
spring.kafka.producer.properties.max.request.size=20971520

spring.kafka.consumer.group-id=${KAFKA_GROUP_ID:payment-docker-group}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=com.webflux.micromerce.payment.domain.model.Payment
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.fetch.min.bytes=1
spring.kafka.consumer.properties.fetch.max.wait.ms=500
spring.kafka.consumer.properties.max.partition.fetch.bytes=1048576
spring.kafka.consumer.properties.session.timeout.ms=45000
spring.kafka.consumer.properties.heartbeat.interval.ms=10000
spring.kafka.consumer.properties.max.poll.interval.ms=300000
spring.kafka.consumer.properties.max.poll.records=100

spring.kafka.topic.payment=payment-topic
spring.kafka.listener.ack-mode=MANUAL
spring.kafka.listener.type=BATCH
spring.kafka.listener.concurrency=3
spring.kafka.admin.auto-create=true
spring.kafka.admin.properties.cleanup.policy=compact
spring.kafka.admin.properties.min.insync.replicas=1

# Management Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.db.enabled=true
management.health.diskspace.enabled=true

# Logging Configuration
logging.level.com.webflux.micromerce=INFO
logging.level.org.springframework.r2dbc=INFO
logging.level.io.r2dbc.mysql=INFO
logging.level.org.springframework.kafka=INFO

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.paymentService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.paymentService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.paymentService.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.paymentService.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.paymentService.failureRateThreshold=50

resilience4j.retry.instances.paymentService.maxAttempts=3
resilience4j.retry.instances.paymentService.waitDuration=1s
resilience4j.retry.instances.paymentService.enableExponentialBackoff=true
resilience4j.retry.instances.paymentService.exponentialBackoffMultiplier=2

resilience4j.ratelimiter.instances.paymentService.limitForPeriod=10
resilience4j.ratelimiter.instances.paymentService.limitRefreshPeriod=1s
resilience4j.ratelimiter.instances.paymentService.timeoutDuration=3s

resilience4j.bulkhead.instances.paymentService.maxConcurrentCalls=20
resilience4j.bulkhead.instances.paymentService.maxWaitDuration=500ms

# Payment Service Configuration
payment.timeout=30000
payment.retry.max-attempts=3
payment.retry.initial-interval=1000
payment.retry.multiplier=2.0
payment.retry.max-interval=10000
